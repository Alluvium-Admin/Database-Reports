{
    "INACTIVE_PERMISSION_SCHEMES" : "SELECT ps.id, ps.name, COUNT(p.id) FROM permissionscheme ps FULL OUTER JOIN nodeassociation n ON ps.id = n.SINK_NODE_ID FULL OUTER JOIN project p ON p.id = n.SOURCE_NODE_ID AND n.SINK_NODE_ENTITY = 'PermissionScheme' GROUP BY ps.id, ps.name HAVING COUNT(p.id) = 0",
    "INACTIVE_WORKFLOWS" : "SELECT id,workflowname FROM jiraworkflows j WHERE j.id NOT IN ( SELECT wws.workflowId FROM ( SELECT w.id, w.name AS workflowscheme, ws.workflow AS workflow, j.id AS workflowId FROM workflowscheme w JOIN workflowschemeentity ws ON ws.SCHEME = w.id RIGHT JOIN jiraworkflows j ON ws.workflow = j.workflowname ) AS wws WHERE wws.id IN ( SELECT w.id FROM project p JOIN nodeassociation n ON p.id = n.SOURCE_NODE_ID AND n.SINK_NODE_ENTITY = 'WorkflowScheme' RIGHT JOIN workflowscheme w ON w.id = n.SINK_NODE_ID ) ) ORDER BY workflowname ASC",
    "INACTIVE_WORKFLOW_SCHEMES": "SELECT w.id, w.name, COUNT(p.id) FROM workflowscheme w FULL OUTER JOIN nodeassociation n ON w.id = n.SINK_NODE_ID FULL OUTER JOIN project p ON p.id = n.SOURCE_NODE_ID AND n.SINK_NODE_ENTITY = 'WorkflowScheme' GROUP BY w.id, w.name HAVING COUNT(p.id) = 0",
    "ARCHIVED_PROJECTS": "select p.id,p.pkey, p.pname , max (j.updated), count(j.id) from propertyentry pe join project p on pe.entity_id=p.id left join jiraissue j on j.project = p.id where property_key = 'jira.archiving.projects' group by p.id order by max(j.updated)",
    "ORPHAN_CUSTOM_FIELDS": "SELECT cf.id, cf.cfname ,  cf.customfieldtypekey FROM customfield cf WHERE cf.id NOT IN ( SELECT c.id FROM customfield c JOIN fieldscreenlayoutitem f ON c.id::text= REPLACE (f.FIELDIDENTIFIER,'customfield_', '') ) ORDER BY cf.cfname",
    "PROJECT_DETAILS": "SELECT p.id, p.pname, p.pkey,cu.email_address project_lead, MAX(i.UPDATED) last_update, count(i.id) as num_of_issues, pc.cname project_category FROM project p LEFT JOIN jiraissue i ON i.project = p.id LEFT JOIN nodeassociation n on p.id = n.source_node_id and n.sink_node_entity ='ProjectCategory' LEFT JOIN projectcategory pc on p.id = pc.id LEFT JOIN cwd_user cu ON p.lead = cu.user_name GROUP BY p.id, p.pname, p.pkey, pc.cname, cu.email_address ORDER BY MAX(i.UPDATED) desc",
    "STATUSES_WITH_NO_ISSUES": "SELECT  iss.id, iss.pname, iss.statuscategory, count(j.id) FROM issuestatus iss LEFT JOIN jiraissue j ON j.issuestatus = iss.id group by iss.id having count(j.id) = 0",
    "INACTIVE_PRIORITY_SCHEMES": "SELECT * FROM fieldconfigscheme fcs WHERE fcs.fieldid =  'priority' AND fcs.id NOT IN ( select cc.fieldconfigscheme from configurationcontext cc join fieldconfigscheme fcs on fcs.id = cc.fieldconfigscheme join project p on p.id = cc.project where cc.fieldconfigscheme in (select id from fieldconfigscheme where fieldid='priority') GROUP BY cc.fieldconfigscheme; )",
    "ISSUETYPES": "SELECT i.id issuetype_Id, i.pname issue_name, COUNT(*) num_of_issues FROM jiraissue j RIGHT JOIN issuetype i on j.issuetype  = i.ID GROUP BY i.id ORDER BY num_of_issues DESC",
    "INACTIVE_NOTIFICATION_SCHEME": "select ntf.id, ntf.name, count(p.id) projects from nodeassociation n full outer join project p on  p.id = n.source_node_id full outer join notificationscheme ntf on ntf.id = n.sink_node_id where sink_node_entity  = 'NotificationScheme' group by ntf.id, ntf.name having count(p.id) = 0 order by projects",
    "RESOLUTIONS": "select r.id, r.pname, r.description, count(*) num_of_issues, max(j.updated) last_used from jiraissue j right join resolution r on r.id = j.resolution group by r.id order by last_used desc"
}